// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ----------------------
// User model
// ----------------------
model User {
  id                String             @id @default(uuid())
  clerkUserId       String             @unique
  email             String             @unique
  name              String?
  imageUrl          String?         
  industry          String?
  industryInsights  IndustryInsight?  @relation(fields: [industry], references: [industry])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // profile
  bio               String?
  experience        Int?
  skills            String[]

  assessments       Assessment[]
  resume            Resume?
  coverLetters      CoverLetter[]
}

// ----------------------
// Assessment model
// ----------------------
model Assessment {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  quizScore         Float
  questions         Json[]
  category          String
  improvementTip    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

// ----------------------
// Resume model
// ----------------------
model Resume {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  content           String?  @db.Text
  atsScore          Float?
  feedback          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// ----------------------
// CoverLetter model
// ----------------------
model CoverLetter {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  content           String
  jobDescription    String?
  companyName       String
  jobTitle          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

// ----------------------
// IndustryInsights model
// ----------------------
model IndustryInsight {
  id                String        @id @default(uuid())
  industry          String        @unique

  users             User[]
  salaryRanges      Json[]

  growthRate        Float
  demandLevel       DemandLevel
  topSkills         String[]        

  marketOutlook     MarketOutlook
  keyTrends         String[]

  recommendedSkills String[]

  lastUpdated       DateTime      @default(now())
  nextUpdate        DateTime

  @@index([industry])
}

// ----------------------
// Enums
// ----------------------
enum DemandLevel {
  HIGH
  NEUTRAL
  NEGATIVE
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
